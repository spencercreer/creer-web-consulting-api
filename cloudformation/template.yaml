AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creer Web Consulting - Contact Form API'

Parameters:
  SenderEmail:
    Type: String
    Description: Email address to send from (must be verified in SES)
    Default: spencercreer@gmail.com
  
  RecipientEmail:
    Type: String
    Description: Email address to receive contact form submissions
    Default: spencercreer@gmail.com
  
  CorsOrigin:
    Type: String
    Description: Allowed CORS origin (frontend URL)
    Default: '*'

Resources:
  # DynamoDB Table for storing leads
  ContactLeadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ContactLeads
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leadId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: leadId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Project
          Value: CreerWebConsulting
        - Key: Environment
          Value: Production

  # Lambda Execution Role
  ContactFormLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ContactFormLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ContactFormLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ContactLeadsTable.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function
  ContactFormFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ContactFormFunction
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt ContactFormLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ContactLeadsTable
          SENDER_EMAIL: !Ref SenderEmail
          RECIPIENT_EMAIL: !Ref RecipientEmail
          CORS_ORIGIN: !Ref CorsOrigin
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Placeholder - deploy with actual code' })
            };
          };
      Tags:
        - Key: Project
          Value: CreerWebConsulting

  # Lambda Log Group
  ContactFormLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ContactFormFunction}'
      RetentionInDays: 30

  # API Gateway REST API
  ContactFormApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ContactFormApi
      Description: API for Creer Web Consulting contact form
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ContactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ContactFormApi
      ParentId: !GetAtt ContactFormApi.RootResourceId
      PathPart: contact

  # API Gateway Method (POST)
  ContactMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ContactResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactFormFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Method (OPTIONS for CORS)
  ContactOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ContactResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${CorsOrigin}'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ContactFormApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ContactMethod
      - ContactOptionsMethod
    Properties:
      RestApiId: !Ref ContactFormApi
      StageName: prod

  # Lambda Permission for API Gateway
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContactFormFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactFormApi}/*/*'

  # API Gateway Usage Plan (for throttling)
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ContactFormApiDeployment
    Properties:
      UsagePlanName: ContactFormUsagePlan
      Description: Usage plan for contact form API
      ApiStages:
        - ApiId: !Ref ContactFormApi
          Stage: prod
      Throttle:
        BurstLimit: 10
        RateLimit: 5
      Quota:
        Limit: 1000
        Period: DAY

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ContactFormApi}.execute-api.${AWS::Region}.amazonaws.com/prod/contact'
    Export:
      Name: ContactFormApiEndpoint
  
  DynamoDBTableName:
    Description: DynamoDB table name for leads
    Value: !Ref ContactLeadsTable
    Export:
      Name: ContactLeadsTableName
  
  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ContactFormFunction.Arn
    Export:
      Name: ContactFormFunctionArn
